/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mayforever.ceredeclient;

import com.mayforever.ceredeclient.model.ChunkImageRequest;
import com.mayforever.ceredeclient.model.ChunkImageResponse;
import com.mayforever.ceredeclient.model.Command;
import com.mayforever.ceredeclient.model.CommandRequest;
import com.mayforever.ceredeclient.model.ImageRequest;
import com.mayforever.ceredeclient.model.ImageResponse;
import com.mayforever.thread.BaseThread;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.apache.log4j.Logger;

/**
 *
 * @author mis
 */
public class RemoteViewer extends javax.swing.JFrame 
    implements Runnable,MouseMotionListener,MouseListener,KeyListener, WindowListener{

    /**
     * Creates new form RemoteVIewer
     */
    Image image1;
    Graphics graphics;
    public Logger logger = Logger.getLogger("Remote Viewer");
    private LoadingFrame loadingFrame = null;
    private String hash = null;
    public int chunkIndex = 0;
    private long lastImageDataTimeProcess = 0l;
    private SessionSendMonitor sessionSendMonitor = null;
//    private byte[] tempData = null;
//
//    public byte[] getTempData() {
//        return tempData;
//    }
//
//    public void setTempData(byte[] tempData) {
//        this.tempData = tempData;
//    }
    public RemoteViewer(String hash) {
 
        
        initComponents();
        
        loadingFrame = new LoadingFrame();
        // loadingFrame.getjProgressBar().setMaximum(100);
        logger.debug("Maximum loading frame progress :" + loadingFrame.getjProgressBar().getMaximum());
        logger.debug("Manimum loading frame progress :" + loadingFrame.getjProgressBar().getMinimum());
        
        this.hash = hash;
        this.jPanel1.addMouseListener(this);
        this.jPanel1.addMouseMotionListener(this);
        this.jPanel1.addKeyListener(this);
        this.showRemoteViewer();
        
        this.addWindowListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run(){
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        this.loadingFrame.setVisible(true);
        this.loadingFrame.getjLprocess().setText("Sending Request To Server ...");
        logger.debug("Sending Request To Server ...");
        
        ImageRequest imageRequest = new ImageRequest();
        
        imageRequest.setHash(hash);
        imageRequest.setRequestorHash(App.hash);
        
        this.loadingFrame.getjLprocess().setText("Sending Image Request To Server ...");
        App.imageClient.sendImagePacket(imageRequest.toBytes());
        this.updateLastSessionDate();
        sessionSendMonitor = new SessionSendMonitor();
        setVisible(true);
    }
    
    public void showRemoteViewer(){
        java.awt.EventQueue.invokeLater(this);
    }
    private int WIDTH = 0;
    private int HEIGHT = 0;
    
    int mouseX = 0; 
    int mouseY = 0;
    public void updateJScrollView(byte[] bufferImage){
            
                    try {
//                        logger.debug("Processing image Response...");
//                        if((WIDTH != imageResponse.getWidth()) && (HEIGHT != imageResponse.getHeight())){
//                            getjPanel1().setPreferredSize(new Dimension(imageResponse.getWidth(),imageResponse.getHeight()));
//                            WIDTH = imageResponse.getWidth();
//                            HEIGHT = imageResponse.getHeight();
//                            logger.debug("device size set" );
//                            getjScrollPane1().setViewportView(getjPanel1());
//                            getjScrollPane1().validate();
//                        }
                        
                        //             this.screenLoader.getScreenView().setSize(screenSize.getWidth(), screenSize.getHeight());
                        //             controlFrame.getjPanel1().add(this.screenLoader.getScreenView());
                        
                        
                        image1 = ImageIO.read(new ByteArrayInputStream(bufferImage));
                        logger.debug(WIDTH);
//                        BufferedImage image2= ImageIO.read(new ByteArrayInputStream(imageResponse.getBufferImage()));
                        image1 = image1.getScaledInstance(WIDTH,HEIGHT,Image.SCALE_FAST);
                        graphics = jPanel1.getGraphics();
//                        try{
//                           
//                        }catch(NullPointerException npe){
//                            
//                        }
                         graphics.drawImage(image1, 0, 0, WIDTH,HEIGHT, jPanel1);
//                        getjScrollPane1().setViewportView(getjPanel1());
////                        ImageIO.write(image2, "jpeg", new File("/home/mis/output.jpg"));
//                        getjScrollPane1().validate();
//                        getjScrollPane1().repaint();
                        this.updateLastSessionDate();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    } catch(Exception e){
                        e.printStackTrace();
                        
                    }
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               
        
    }
    
    public void updateJScrollViewSize(ImageResponse imageResponse){
            
                    
        logger.debug("Processing image Response...");
        if((WIDTH != imageResponse.getWidth()) && (HEIGHT != imageResponse.getHeight())){
            getjPanel1().setPreferredSize(new Dimension(imageResponse.getWidth(),imageResponse.getHeight()));
            WIDTH = imageResponse.getWidth();
            HEIGHT = imageResponse.getHeight();
            logger.debug("device size set" );
            getjScrollPane1().setViewportView(getjPanel1());
            getjScrollPane1().validate();
        }

        //             this.screenLoader.getScreenView().setSize(screenSize.getWidth(), screenSize.getHeight());
        //             controlFrame.getjPanel1().add(this.screenLoader.getScreenView());

        
//        logger.debug("if "+chunkIndex+"<"+ App.chunkCount);
//        if(chunkIndex< App.chunkCount){
//            ChunkImageRequest chunkImageRequest = new ChunkImageRequest();
//            chunkImageRequest.setRequestorHash(imageResponse.getRequestorHash());
//            chunkImageRequest.setHash(imageResponse.getHash());
//            chunkImageRequest.setChunkNumber(chunkIndex);
//            chunkImageRequest.setProtocol((byte)4);
//            
//            App.imageClient.sendImagePacket(chunkImageRequest.toBytes());
//            chunkIndex++;
//        }else{
//            chunkIndex = 0;
//            ImageRequest imageRequest = new ImageRequest();
//        
//            imageRequest.setHash(hash);
//            imageRequest.setRequestorHash(App.hash);
//
//            this.loadingFrame.getjLprocess().setText("Sending Image Request To Server ...");
//            App.imageClient.sendImagePacket(imageRequest.toBytes());
//        }   
        
    }
    public void sendChunkImageRequest(ChunkImageResponse chunkImageResponse){
        ChunkImageRequest chunkImageRequest = new ChunkImageRequest();
        chunkImageRequest.setRequestorHash(chunkImageResponse.getRequestorHash());
        chunkImageRequest.setHash(chunkImageResponse.getHash());
        chunkImageRequest.setChunkNumber(chunkIndex);
        chunkImageRequest.setProtocol((byte)4);
        if(chunkIndex<App.chunkCount){
            App.imageClient.sendImagePacket(chunkImageRequest.toBytes());
            logger.debug("if "+chunkIndex+"<"+ App.chunkCount);
        }
        
        chunkIndex++;
        
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo debug : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(debug.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(debug.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RemoteVIewer().setVisible(true);
//            }
//        });
//    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
        mouseX = e.getX();
        mouseY = e.getY();
//        System.out.println(InputEvent.getMaskForButton(e.getButton()));
        CommandRequest commandRequest = new CommandRequest();
        commandRequest.setProtocol((byte)6);
        commandRequest.setCommand(Command.MOUSE_MOVE);
        commandRequest.setHash(hash);
        commandRequest.setRequestorHash(App.hash);
        int[] params = {mouseX, mouseY};
        commandRequest.setParams(params);
        try {
            App.commandClient.getTcpClient().sendPacket(commandRequest.toBytes());

        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
//        try {
//            java.lang.Thread.sleep(100);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
//        doCommand(Command.MOUSE_MOVE,e.getX(),e.getY());
//        try {
//            this.tcpClient.sendPacket(doCommand(Command.MOUSE_MOVE,e.getX(),e.getY()));
//        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
//        }
        mouseX = e.getX();
        mouseY = e.getY();
//        System.out.println(InputEvent.getMaskForButton(e.getButton()));
        CommandRequest commandRequest = new CommandRequest();
        commandRequest.setProtocol((byte)6);
        commandRequest.setCommand(Command.MOUSE_MOVE);
        commandRequest.setHash(hash);
        commandRequest.setRequestorHash(App.hash);
        int[] params = {mouseX, mouseY};
        commandRequest.setParams(params);
//        logger.debug(commandRequest.toBytes());
        try {
            App.commandClient.getTcpClient().sendPacket(commandRequest.toBytes());

        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
//        try {
//            java.lang.Thread.sleep(100);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    

    @Override
    public void mouseClicked(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
//        System.out.println(InputEvent.getMaskForButton(e.getButton()));
        CommandRequest commandRequest = new CommandRequest();
        commandRequest.setProtocol((byte)6);
        commandRequest.setCommand(Command.MOUSE_PRESSED);
        commandRequest.setHash(hash);
        commandRequest.setRequestorHash(App.hash);
        int[] params = {InputEvent.getMaskForButton(e.getButton())};
        commandRequest.setParams(params);
        try {
            App.commandClient.getTcpClient().sendPacket(commandRequest.toBytes());

        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
//        System.out.println(e.getButton());
////        doCommand(Command.MOUSE_RELEASED,e.getX(),e.getY());
//        try {
//            this.tcpClient.sendPacket(doCommand(Command.MOUSE_RELEASED,e.getButton()));
//        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        System.out.println(InputEvent.getMaskForButton(e.getButton()));
        CommandRequest commandRequest = new CommandRequest();
        commandRequest.setProtocol((byte)6);
        commandRequest.setCommand(Command.MOUSE_RELEASED);
        commandRequest.setHash(hash);
        commandRequest.setRequestorHash(App.hash);
        int[] params = {InputEvent.getMaskForButton(e.getButton())};
        commandRequest.setParams(params);
        try {
            App.commandClient.getTcpClient().sendPacket(commandRequest.toBytes());

        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //To change body of generated methods, choose Tools | Templates.
//        doCommand(Command.MOUSE_RELEASED,e.getKeyChar());
//        System.out.println("the key is :"+e.getExtendedKeyCode());
    }

    @Override
    public void keyPressed(KeyEvent e) {
        //To change body of generated methods, choose Tools | Templates.
//        doCommand(Command.MOUSE_RELEASED,e.getKeyChar());
        System.out.println("the key is :"+e.getExtendedKeyCode());
        CommandRequest commandRequest = new CommandRequest();
        commandRequest.setProtocol((byte)6);
        commandRequest.setCommand(Command.KEY_PRESSED);
        commandRequest.setHash(hash);
        commandRequest.setRequestorHash(App.hash);
        int[] params = {e.getExtendedKeyCode()};
        commandRequest.setParams(params);
        try {
            App.commandClient.getTcpClient().sendPacket(commandRequest.toBytes());

        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //To change body of generated methods, choose Tools | Templates.
        System.out.println("the key is :"+e.getExtendedKeyCode());
        CommandRequest commandRequest = new CommandRequest();
        commandRequest.setProtocol((byte)6);
        commandRequest.setCommand(Command.KEY_RELEASED);
        commandRequest.setHash(hash);
        commandRequest.setRequestorHash(App.hash);
        int[] params = {e.getExtendedKeyCode()};
        commandRequest.setParams(params);
        try {
            App.commandClient.getTcpClient().sendPacket(commandRequest.toBytes());

        } catch (IOException ex) {
//            Logger.getLogger(ScreenLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void windowOpened(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        this.sessionSendMonitor.stopSenderMonitor();
        App.mapRemoteViewer.remove(hash);
    }

    @Override
    public void windowIconified(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent we) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private class SessionSendMonitor extends BaseThread{
        SessionSendMonitor(){
            this.startThread();
        }
        int sessionLimit = 5;
        public void stopSenderMonitor()
        {
            this.stopThread();
        }        
        @Override
        public void run() {
            while(this.getServiceState() == com.mayforever.thread.state.ServiceState.RUNNING){
                try {
                    java.lang.Thread.sleep(2000);
                    Date date = new Date();
                    long currentTime = date.getTime();
                    long timeDiff = currentTime - lastImageDataTimeProcess;
                    
                    int diffsec = (int) (timeDiff / (1000));
//                    System.out.println("diffSex " + diffsec);
                    if(diffsec >= 5){
                        sessionLimit--;
                        if(sessionLimit == 0){
                            App.imageClient.socketError(new Exception("Broken Peer Error"));
                            logger.warn("Peer is Broken");
                            sessionLimit = 5;
                        }
                        logger.info("Request Timeout Create Another Image Request");
                        ImageRequest imageRequest = new ImageRequest();
        
                        imageRequest.setHash(hash);
                        imageRequest.setRequestorHash(App.hash);
                        
//                        loadingFrame.getjLprocess().setText("Sending Image Request To Server ...");
                        App.imageClient.sendImagePacket(imageRequest.toBytes());
                    }
                } catch (InterruptedException ex) {
//                    java.util.logging.Logger.getLogger(RemoteViewer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    private void updateLastSessionDate(){
        Date date = new Date();
        lastImageDataTimeProcess = date.getTime();
    }
    
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo debug : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(debug.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(debug.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RemoteVIewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RemoteVIewer().setVisible(true);
//            }
//        });
//    }
    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
